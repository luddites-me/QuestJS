import { FnPrmVoid } from "../../@types/fn";
import { PronounIdentifier } from "../lang";

export interface INode {
  alias: string;
  canReachThrough(...params): boolean;
  canSeeThrough(): boolean;
  canTalkPlayer(): boolean;
  clonePrototype: INode;
  complexIsAtLoc(...params): boolean;
  componentHolder: any;
  countAtLoc(loc): 0 | 1;
  doEvent(turn): void;
  eventActive: boolean;
  eventCondition(...params): any;
  eventCountdown: number;
  eventIsActive(): boolean;
  eventPeriod: number;
  eventScript(...params): any;
  getAlias(): string;
  getContents: any;
  getExits(...params): INode[];
  getSaveString(): string;
  getWorn(...params): any;
  hasExit(...params): boolean;
  hidden: boolean;
  isAtLoc(loc, situation?: number): boolean;
  isHeld(): boolean;
  isHere(): boolean;
  isHereOrHeld(): boolean;
  isHidden(): boolean;
  isLocked(): boolean;
  itemDropped(...params): void;
  itemTaken(...params): void;
  listAlias: string;
  loc: INode;
  previousLoc: INode;
  locked: boolean;
  moveToFrom(toLoc, fromLoc): void;
  name: string;
  nameModifierFunctions: FnPrmVoid[];
  onCreation(...params): void;
  onMove(...params): any;
  pluralAlias: string;
  postLoad(): void;
  preSave(): void;
  pronouns: PronounIdentifier;
  scenery: any;
  scopeSnapshot(visible): void;
  scopeStatus: any;
  scopeStatusForRoom: any;
  templatePostLoad(): void;
  templatePreSave(): void;
  use(...params): any;
  verbFunctions: FnPrmVoid[];
  [key: string]: any;
}
